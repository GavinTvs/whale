// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "${rootProject.rootDir}/config.gradle"

project.ext {
    /**
     * 通用设置
     */
    setDefaultConfig = {
        extension ->
            //通用脚本引入
            extension.apply plugin: 'com.jakewharton.butterknife'
            extension.apply plugin: 'kotlin-android'
            extension.apply plugin: 'kotlin-kapt'

            extension.android {
                compileSdkVersion compileSdkVer
                buildToolsVersion buildToolsVer

                defaultConfig {
                    targetSdkVersion targetSdkVer
                    minSdkVersion minSdkVer

                    //ARouter 初始化配置
                    javaCompileOptions {
                        annotationProcessorOptions {
                            arguments = [AROUTER_MODULE_NAME: project.getName()]
                        }
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_11
                    targetCompatibility JavaVersion.VERSION_11
                }

                buildTypes {
                    debug {
                        defaultConfig { minSdkVersion minSdkVer }
                    }
                    release {
                        defaultConfig { minSdkVersion minSdkVer }
                    }
                }

                dataBinding {
                    enabled = true
                }
            }

            extension.kapt {
                arguments {
                    arg("AROUTER_MODULE_NAME", project.getName())
                }
            }

            setDependencies extension.dependencies
    }

    //设置App配置
    setAppDefaultConfig = {
        extension ->
            extension.apply plugin: 'com.android.application'
            extension.description "app"
            setDefaultConfig extension

            extension.android.defaultConfig {
                if ("app" != extension.getName()) {
                    applicationId applicationId + "." + extension.getName()
                } else {
                    applicationId applicationId
                }
                multiDexEnabled true
            }
            /**
             * 模块化编译时根据模块名动态更改属性值
             * 更改applicationId和app_name
             */
            extension.android.buildTypes {
                if ("app" != extension.getName()) {
                    appName = extension.getName()
                }
                debug {
                    //applicationIdSuffix ".debug"
                    resValue("string", "app_name", appName + "_DEBUG")
                }
                release {
                    resValue("string", "app_name", appName)
                }
            }
    }

    //设置Lib配置
    setLibDefaultConfig = {
        extension ->
            extension.apply plugin: 'com.android.library'
            extension.description "lib"
            setDefaultConfig extension

            extension.android {
                defaultConfig {
                    //Library 如果不指定defaultPublishConfig 构建都会是release版本
//                    defaultPublishConfig 'debug'

                    //指定组件混淆规则合并目录
                    consumerProguardFiles 'proguaed-rules.pro'
                }
            }
            setDependencies extension.dependencies
    }

    //设置依赖
    setDependencies = {
        extension ->

    }
}